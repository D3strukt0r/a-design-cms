name: CI/CD

env:
  IMAGE_NAME_PHP: a-design-cms-php
  IMAGE_NAME_NGINX: a-design-cms-nginx

on:
  push:
    branches:
      - master
      - develop
    paths:
      - .github/workflows/ci-cd.yml
      - 'config/**'
      - 'docker/**'
      - 'modules/**'
      - 'storage/rebrand/**'
      - 'templates/**'
      - 'tests/**'
      - 'web/**'
      - .dockerignore
      - codeception.yml
      - composer.json
      - composer.lock
      - craft
      - '**/Dockerfile'

  pull_request:

  workflow_dispatch:

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        php: [7.1, 7.2, 7.3, 7.4]
        # db: [mysql, pgsql]
        db: [mysql]
        include:
          - php: 7.4
            db: mysql
            test_with_coverage: 1

    services:
      mysql:
        image: mariadb
        ports:
          - 3306
        env:
          MYSQL_DATABASE: test
          MYSQL_ROOT_PASSWORD: password
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

      postgres:
        image: postgres
        ports:
          - 5432
        env:
          POSTGRES_DB: test
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup environment variables
        run: |
          echo "::set-env name=DB_SERVER::127.0.0.1"
          echo "::set-env name=DB_PASSWORD::password"
          echo "::set-env name=DB_DATABASE::test"
          if [ "${{ matrix.db }}" = 'mysql' ]; then
              echo "::set-env name=DB_DRIVER::mysql"
              echo "::set-env name=DB_PORT::${{ job.services.mysql.ports['3306'] }}"
              echo "::set-env name=DB_USER::root"
          elif [ "${{ matrix.db }}" = 'pgsql' ]; then
              echo "::set-env name=DB_DRIVER::pgsql"
              echo "::set-env name=DB_PORT::${{ job.services.postgres.ports['5432'] }}"
              echo "::set-env name=DB_USER::postgres"
          fi

      - name: Setup PHP
        if: matrix.test_with_coverage != 1
        uses: shivammathur/setup-php@v2
        with:
          php-version: "${{ matrix.php }}"
          extensions: imagick
          coverage: none

      - name: Setup PHP with Xdebug
        if: matrix.test_with_coverage == 1
        uses: shivammathur/setup-php@v2
        with:
          php-version: "${{ matrix.php }}"
          extensions: imagick
          coverage: xdebug

      - name: Setup problem matchers for PHP
        run: echo "::add-matcher::${{ runner.tool_cache }}/php.json"

      - name: Setup MySQL
        if: matrix.db == 'mysql'
        run: mysql --host="$DB_SERVER" --port="$DB_PORT" --user="$DB_USER" --password="$DB_PASSWORD" -e "SET GLOBAL sql_mode = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';"

      - name: Copy environment variables
        run: cp tests/.env.${{ matrix.db }}.example tests/.env

      # https://github.com/actions/cache/blob/main/examples.md#php---composer
      - name: Get Composer Cache Directory
        id: composer-cache-dir-path
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache Composer libraries
        uses: actions/cache@v2
        id: composer-cache # use this to check for `cache-hit` (`steps.composer-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.composer-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      # To run on older php version
      - name: Remove composer.lock
        run: rm composer.lock

      - name: Install dependencies
        run: composer install --prefer-dist --no-interaction --no-plugins --no-scripts --no-progress --no-suggest

      - name: Run tests
        if: matrix.test_with_coverage != 1
        run: vendor/bin/codecept run unit

      - name: Run tests with coverage
        if: matrix.test_with_coverage == 1
        run: |
          mkdir -p build/logs
          vendor/bin/codecept run unit --coverage-xml coverage.xml
          bash <(curl -s https://codecov.io/bash)

      - name: Run test build
        run: |
          if [ -f docker-compose.test.yml ]; then
              docker-compose --file docker-compose.test.yml build
              docker-compose --file docker-compose.test.yml run sut
          else
              docker build . --file Dockerfile
          fi

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup environment variables
        run: |
          # Change all uppercase to lowercase
          echo "::set-env name=IMAGE_ID_PHP::$(echo "${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME_PHP" | tr '[A-Z]' '[a-z]')"
          echo "::set-env name=IMAGE_ID_NGINX::$(echo "${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME_NGINX" | tr '[A-Z]' '[a-z]')"

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [ "$VERSION" = 'master' ] && VERSION=latest
          [ "$VERSION" = 'develop' ] && VERSION=nightly

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          echo "::set-env name=VERSION::$VERSION"

      - name: Build PHP image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME_PHP --target php

      - name: Build Nginx image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME_NGINX --target nginx

      - name: Log into registry
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push PHP image to Docker Hub
        run: |
          docker tag $IMAGE_NAME_PHP $IMAGE_ID_PHP:$VERSION
          docker push $IMAGE_ID_PHP:$VERSION

      - name: Push Nginx image to Docker Hub
        run: |
          docker tag $IMAGE_NAME_NGINX $IMAGE_ID_NGINX:$VERSION
          docker push $IMAGE_ID_NGINX:$VERSION
