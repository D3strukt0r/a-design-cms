name: CI/CD

env:
  IMAGE_NAME_PHP: a-design-cms-php
  IMAGE_NAME_NGINX: a-design-cms-nginx

on:
  push:
    branches:
      - "**"
    tags:
      - "*.*.*"
    paths:
      - .github/workflows/ci-cd.yml
      - "config/**"
      - "docker/**"
      - "modules/**"
      - "storage/rebrand/**"
      - "templates/**"
      - "tests/**"
      - "web/**"
      - .dockerignore
      - codeception.yml
      - composer.json
      - composer.lock
      - craft
      - Dockerfile

  pull_request:

  workflow_dispatch:

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        php: [7.1, 7.2, 7.3, 7.4]
        # db: [mysql, pgsql]
        db: [mysql]
        include:
          - php: 7.4
            db: mysql
            test_with_coverage: 1
            test_build: 1

    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

      mysql:
        image: mariadb
        ports:
          - 3306
        env:
          MYSQL_DATABASE: test
          MYSQL_ROOT_PASSWORD: password
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

      # postgres:
      #   image: postgres
      #   ports:
      #     - 5432
      #   env:
      #     POSTGRES_DB: test
      #     POSTGRES_PASSWORD: password
      #   options: >-
      #     --health-cmd pg_isready
      #     --health-interval 10s
      #     --health-timeout 5s
      #     --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup environment variables
        run: |
          echo "DB_SERVER=127.0.0.1" >>$GITHUB_ENV
          echo "DB_PASSWORD=password" >>$GITHUB_ENV
          echo "DB_DATABASE=test" >>$GITHUB_ENV
          if [ "${{ matrix.db }}" = 'mysql' ]; then
              echo "DB_DRIVER=mysql" >>$GITHUB_ENV
              echo "DB_PORT=${{ job.services.mysql.ports['3306'] }}" >>$GITHUB_ENV
              echo "DB_USER=root" >>$GITHUB_ENV
          elif [ "${{ matrix.db }}" = 'pgsql' ]; then
              echo "DB_DRIVER=pgsql" >>$GITHUB_ENV
              echo "DB_PORT=${{ job.services.postgres.ports['5432'] }}" >>$GITHUB_ENV
              echo "DB_USER=postgres" >>$GITHUB_ENV
          fi

      - name: Setup PHP
        if: matrix.test_with_coverage != 1
        uses: shivammathur/setup-php@v2
        with:
          php-version: "${{ matrix.php }}"
          extensions: imagick
          coverage: none

      - name: Setup PHP with Xdebug
        if: matrix.test_with_coverage == 1
        uses: shivammathur/setup-php@v2
        with:
          php-version: "${{ matrix.php }}"
          extensions: imagick
          coverage: xdebug

      - name: Setup problem matchers for PHP
        run: echo "::add-matcher::${{ runner.tool_cache }}/php.json"

      - name: Setup problem matchers for PHPUnit
        run: echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"

      - name: Setup MySQL
        if: matrix.db == 'mysql'
        run: mysql --host="$DB_SERVER" --port="$DB_PORT" --user="$DB_USER" --password="$DB_PASSWORD" -e "SET GLOBAL sql_mode = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';"

      - name: Copy environment variables
        run: cp tests/.env.${{ matrix.db }}.example tests/.env

      # https://github.com/actions/cache/blob/main/examples.md#php---composer
      - name: Get Composer Cache Directory
        id: composer-cache-dir-path
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache local composer repository
        uses: actions/cache@v2
        id: composer-cache
        with:
          # A list of files, directories, and wildcard patterns to cache and restore. See @actions/glob for supported patterns.
          path: ${{ steps.composer-cache-dir-path.outputs.dir }}
          # An explicit key for restoring and saving the cache
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          # An ordered list of keys to use for restoring the cache if no cache hit occurred for key
          restore-keys: |
            ${{ runner.os }}-composer-

      # To run on older php version
      - name: Remove composer.lock
        run: rm composer.lock

      - name: Install dependencies
        run: composer install --prefer-dist --no-interaction --no-plugins --no-scripts --no-progress --no-suggest

      - name: Run tests
        if: github.event_name != 'push' || github.repository != 'D3strukt0r/a-design-cms' || matrix.test_with_coverage != 1
        run: vendor/bin/codecept run unit

      - name: Run tests with coverage
        if: github.event_name == 'push' && github.repository == 'D3strukt0r/a-design-cms' && matrix.test_with_coverage == 1
        run: |
          mkdir -p build/logs
          vendor/bin/codecept run unit --coverage-xml coverage.xml
          bash <(curl -s https://codecov.io/bash)

      - name: Setup QEMU
        id: qemu
        if: matrix.test_build == 1
        uses: docker/setup-qemu-action@v1
        # with:
        #   # QEMU static binaries Docker image
        #   image: tonistiigi/binfmt:latest # optional, default is "tonistiigi/binfmt"
        #   # Platforms to install (e.g. arm64,riscv64,arm)
        #   platforms: all # optional, default is "all"

      - name: Setup Docker Buildx
        id: buildx
        if: matrix.test_build == 1
        uses: docker/setup-buildx-action@v1
        with:
          # Buildx version.
          # version: latest # optional
          # Sets the builder driver to be used
          # driver: docker-container # optional, default is "docker-container"
          # List of additional driver-specific options (eg. image=moby/buildkit:master)
          driver-opts: network=host # optional
          # Flags for buildkitd daemon (since buildx v0.3.0)
          # buildkitd-flags: # optional
          # Sets up docker build command as an alias to docker buildx
          # install: false # optional, default is "false"
          # Switch to this builder instance
          # use: true # optional, default is "true"
          # Optional address for docker socket or context from docker context ls
          # endpoint: # optional

      # https://github.com/marketplace/actions/build-and-push-docker-images#leverage-github-cache
      - name: Cache Docker layers
        if: matrix.test_build == 1
        uses: actions/cache@v2
        with:
          # A list of files, directories, and wildcard patterns to cache and restore. See @actions/glob for supported patterns.
          path: /tmp/.buildx-cache
          # An explicit key for restoring and saving the cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          # An ordered list of keys to use for restoring the cache if no cache hit occurred for key
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build PHP (Docker)
        if: matrix.test_build == 1
        uses: docker/build-push-action@v2
        with:
          # Builder instance (see setup-buildx action)
          # builder: # optional
          # Build's context is the set of files located in the specified PATH or URL
          # context: . # optional, default is git context
          # Path to the Dockerfile
          # file: ./Dockerfile # optional, default is "Dockerfile"
          # List of build-time variables
          # build-args: # optional
          # List of metadata for an image
          # labels: # optional
          # List of tags
          tags: localhost:5000/name/app1:latest # optional
          # Always attempt to pull a newer version of the image
          # pull: false # optional, default is "false"
          # Sets the target stage to build
          target: php # optional
          # List of extra privileged entitlement (eg. network.host,security.insecure)
          # allow: # optional
          # Do not use cache when building the image
          # no-cache: false # optional, default is "false"
          # List of target platforms for build
          platforms: linux/amd64,linux/arm64,linux/ppc64le,linux/s390x,linux/386,linux/arm/v7 # optional
          # Load is a shorthand for --output=type=docker
          # load: false # optional, default is "false"
          # Push is a shorthand for --output=type=registry
          push: true # optional, default is "false"
          # List of output destinations (format: type=local,dest=path)
          # outputs: # optional
          # List of external cache sources (eg. type=local,src=path/to/dir)
          cache-from: type=local,src=/tmp/.buildx-cache # optional
          # List of cache export destinations (eg. type=local,dest=path/to/dir)
          cache-to: type=local,dest=/tmp/.buildx-cache # optional
          # List of secrets to expose to the build (eg. key=value, GIT_AUTH_TOKEN=mytoken)
          # secrets: # optional

      - name: Build Nginx (Docker)
        if: matrix.test_build == 1
        uses: docker/build-push-action@v2
        with:
          # Builder instance (see setup-buildx action)
          # builder: # optional
          # Build's context is the set of files located in the specified PATH or URL
          # context: . # optional, default is git context
          # Path to the Dockerfile
          # file: ./Dockerfile # optional, default is "Dockerfile"
          # List of build-time variables
          # build-args: # optional
          # List of metadata for an image
          # labels: # optional
          # List of tags
          tags: localhost:5000/name/app2:latest # optional
          # Always attempt to pull a newer version of the image
          # pull: false # optional, default is "false"
          # Sets the target stage to build
          target: nginx # optional
          # List of extra privileged entitlement (eg. network.host,security.insecure)
          # allow: # optional
          # Do not use cache when building the image
          # no-cache: false # optional, default is "false"
          # List of target platforms for build
          platforms: linux/amd64,linux/arm64,linux/ppc64le,linux/s390x,linux/386,linux/arm/v7 # optional
          # Load is a shorthand for --output=type=docker
          # load: false # optional, default is "false"
          # Push is a shorthand for --output=type=registry
          push: true # optional, default is "false"
          # List of output destinations (format: type=local,dest=path)
          # outputs: # optional
          # List of external cache sources (eg. type=local,src=path/to/dir)
          cache-from: type=local,src=/tmp/.buildx-cache # optional
          # List of cache export destinations (eg. type=local,dest=path/to/dir)
          cache-to: type=local,dest=/tmp/.buildx-cache # optional
          # List of secrets to expose to the build (eg. key=value, GIT_AUTH_TOKEN=mytoken)
          # secrets: # optional

      - name: Inspect
        if: matrix.test_build == 1
        run: |
          docker buildx imagetools inspect localhost:5000/name/app1:latest
          docker buildx imagetools inspect localhost:5000/name/app2:latest

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  deploy:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop') && github.repository == 'D3strukt0r/a-design-cms'

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # https://github.com/actions/starter-workflows/blob/main/ci/docker-publish.yml
      # https://github.com/docker/build-push-action#complete-workflow
      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE_PHP="$(echo "${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME_PHP" | tr '[A-Z]' '[a-z]')"
          DOCKER_IMAGE_NGINX="$(echo "${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME_NGINX" | tr '[A-Z]' '[a-z]')"

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Rename branches which stand for latest or similar
          if [ "$VERSION" = '${{ github.event.repository.default_branch }}' ]; then
            VERSION=latest
          elif [ "$VERSION" = 'develop' ]; then
            VERSION=nightly
          else
            # Rename my/branch to my-branch
            VERSION=$(echo "$VERSION" | sed -r 's#/+#-#g')
          fi

          # Strip "v" prefix from tag name
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=$(echo $VERSION | sed -e 's/^v//')
          fi

          # Create tags
          TAGS_PHP="${DOCKER_IMAGE_PHP}:${VERSION}"
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS_PHP="$TAGS_PHP,${DOCKER_IMAGE_PHP}:${MINOR},${DOCKER_IMAGE_PHP}:${MAJOR},${DOCKER_IMAGE_PHP}:latest"
          # elif [ "${{ github.event_name }}" = 'push' ]; then
          #   TAGS_PHP="$TAGS_PHP,${DOCKER_IMAGE_PHP}:sha-${GITHUB_SHA::8}"
          fi
          TAGS_NGINX="${DOCKER_IMAGE_NGINX}:${VERSION}"
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS_NGINX="$TAGS_NGINX,${DOCKER_IMAGE_NGINX}:${MINOR},${DOCKER_IMAGE_NGINX}:${MAJOR},${DOCKER_IMAGE_NGINX}:latest"
          # elif [ "${{ github.event_name }}" = 'push' ]; then
          #   TAGS_NGINX="$TAGS_NGINX,${DOCKER_IMAGE_NGINX}:sha-${GITHUB_SHA::8}"
          fi

          echo "::set-output name=version::${VERSION}"
          echo "::set-output name=tagsPhp::${TAGS_PHP}"
          echo "::set-output name=tagsNginx::${TAGS_NGINX}"
          echo "::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')"

      - name: Setup QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        # with:
        #   # QEMU static binaries Docker image
        #   image: tonistiigi/binfmt:latest # optional, default is "tonistiigi/binfmt"
        #   # Platforms to install (e.g. arm64,riscv64,arm)
        #   platforms: all # optional, default is "all"

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          # Buildx version.
          version: latest # optional
          # Sets the builder driver to be used
          # driver: docker-container # optional, default is "docker-container"
          # List of additional driver-specific options (eg. image=moby/buildkit:master)
          # driver-opts: | # optional
          #   image=moby/buildkit:master
          #   network=host
          # Flags for buildkitd daemon (since buildx v0.3.0)
          # buildkitd-flags: # optional
          # Sets up docker build command as an alias to docker buildx
          # install: false # optional, default is "false"
          # Switch to this builder instance
          # use: true # optional, default is "true"
          # Optional address for docker socket or context from docker context ls
          # endpoint: # optional

      # https://github.com/marketplace/actions/build-and-push-docker-images#leverage-github-cache
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          # A list of files, directories, and wildcard patterns to cache and restore. See @actions/glob for supported patterns.
          path: /tmp/.buildx-cache
          # An explicit key for restoring and saving the cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          # An ordered list of keys to use for restoring the cache if no cache hit occurred for key
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          # Server address of Docker registry. If not set then will default to Docker Hub
          # registry: # optional, default is docker registry
          # Username used to log against the Docker registry
          username: ${{ secrets.DOCKER_USERNAME }}
          # Password or personal access token used to log against the Docker registry
          password: ${{ secrets.DOCKER_PASSWORD }}
          # Log out from the Docker registry at the end of a job
          # logout: true # optional, default is "true"

      - name: Build and push PHP
        id: docker_build_php
        uses: docker/build-push-action@v2
        with:
          # Builder instance (see setup-buildx action)
          # builder:
          # Build's context is the set of files located in the specified PATH or URL
          # context: . # default is "<Git context>"
          # Path to the Dockerfile
          # file: ./Dockerfile # default is "Dockerfile"
          # List of build-time variables
          # build-args: # optional
          # List of metadata for an image
          # https://github.com/opencontainers/image-spec/blob/master/annotations.md
          labels: | # optional
            maintainer=Manuele Vaccari <manuele.vaccari@gmail.com>
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}
          # List of tags
          tags: ${{ steps.prep.outputs.tagsPhp }}
          # Always attempt to pull a newer version of the image
          # pull: false # optional, default is "false"
          # Sets the target stage to build
          target: php # optional
          # List of extra privileged entitlement (eg. network.host,security.insecure)
          # allow: # optional
          # Do not use cache when building the image
          # no-cache: false # optional, default is "false"
          # List of target platforms for build
          platforms: linux/amd64,linux/arm64,linux/ppc64le,linux/s390x,linux/386,linux/arm/v7 # optional
          # Load is a shorthand for --output=type=docker
          # load: false # optional, default is "false"
          # Push is a shorthand for --output=type=registry
          push: ${{ github.event_name != 'pull_request' }} # optional, default is "false"
          # List of output destinations (format: type=local,dest=path)
          # outputs: # optional
          # List of external cache sources (eg. type=local,src=path/to/dir)
          cache-from: type=local,src=/tmp/.buildx-cache # optional
          # List of cache export destinations (eg. type=local,dest=path/to/dir)
          cache-to: type=local,dest=/tmp/.buildx-cache # optional
          # List of secrets to expose to the build (eg. key=value, GIT_AUTH_TOKEN=mytoken)
          # secrets: # optional

      - name: Build and push Nginx
        id: docker_build_nginx
        uses: docker/build-push-action@v2
        with:
          # Builder instance (see setup-buildx action)
          # builder:
          # Build's context is the set of files located in the specified PATH or URL
          # context: . # default is "<Git context>"
          # Path to the Dockerfile
          # file: ./Dockerfile # default is "Dockerfile"
          # List of build-time variables
          # build-args: # optional
          # List of metadata for an image
          # https://github.com/opencontainers/image-spec/blob/master/annotations.md
          labels: | # optional
            maintainer=Manuele Vaccari <manuele.vaccari@gmail.com>
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}
          # List of tags
          tags: ${{ steps.prep.outputs.tagsNginx }}
          # Always attempt to pull a newer version of the image
          # pull: false # optional, default is "false"
          # Sets the target stage to build
          target: nginx # optional
          # List of extra privileged entitlement (eg. network.host,security.insecure)
          # allow: # optional
          # Do not use cache when building the image
          # no-cache: false # optional, default is "false"
          # List of target platforms for build
          platforms: linux/amd64,linux/arm64,linux/ppc64le,linux/s390x,linux/386,linux/arm/v7 # optional
          # Load is a shorthand for --output=type=docker
          # load: false # optional, default is "false"
          # Push is a shorthand for --output=type=registry
          push: ${{ github.event_name != 'pull_request' }} # optional, default is "false"
          # List of output destinations (format: type=local,dest=path)
          # outputs: # optional
          # List of external cache sources (eg. type=local,src=path/to/dir)
          cache-from: type=local,src=/tmp/.buildx-cache # optional
          # List of cache export destinations (eg. type=local,dest=path/to/dir)
          cache-to: type=local,dest=/tmp/.buildx-cache # optional
          # List of secrets to expose to the build (eg. key=value, GIT_AUTH_TOKEN=mytoken)
          # secrets: # optional
