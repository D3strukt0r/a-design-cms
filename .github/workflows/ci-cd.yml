name: CI/CD

env:
  IMAGE_NAME_PHP: a-design-cms-php
  IMAGE_NAME_NGINX: a-design-cms-nginx

on:
  push:
    branches:
      - master
      - develop

  # Run tests for any PRs.
  pull_request:

  workflow_dispatch:

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        php: [7.1, 7.2, 7.3, 7.4]
        db: [mysql, pgsql]
        include:
          - php: 7.4
            db: mysql
            TASK_TESTS_COVERAGE: 1

    services:
      mariadb:
        image: mariadb
        env:
          MYSQL_ROOT_PASSWORD: mysql
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 5s
          --health-timeout 2s
          --health-retries 3

      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Show version and environment information
        run: |
          php --version
          composer --version
          php -r "echo INTL_ICU_VERSION . \"\n\";"
          php -r "echo INTL_ICU_DATA_VERSION . \"\n\";"
          psql --version
          mysql --version

      - name: Create MySQL test database
        run: |
          mysql -e 'CREATE DATABASE `craft-test`;'
          mysql -e "SET GLOBAL sql_mode = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';"

      - name: Create Postgres test database
        run: psql -U postgres -c 'CREATE DATABASE "craft-test";'

      - name: Install imagick
        run: |
          pear config-set preferred_state beta
          pecl channel-update pecl.php.net
          yes | pecl install imagick

      - name: Copy environment variables
        run: cp tests/.env.example.${{ matrix.db }} tests/.env

      - name: Run tests
        if: matrix.TASK_TESTS_COVERAGE != 1
        run: vendor/bin/codecept run unit

      - name: Run tests with coverage
        if: matrix.TASK_TESTS_COVERAGE == 1
        run: |
          mkdir -p build/logs
          vendor/bin/codecept run unit --coverage-xml coverage.xml
          bash <(curl -s https://codecov.io/bash)

      - name: Run test build
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile
          fi

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set variables
        run: |
          IMAGE_ID_PHP=${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME_PHP

          # Change all uppercase to lowercase
          IMAGE_ID_PHP=$(echo $IMAGE_ID_PHP | tr '[A-Z]' '[a-z]')

          IMAGE_ID_NGINX=${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME_NGINX

          # Change all uppercase to lowercase
          IMAGE_ID_NGINX=$(echo $IMAGE_ID_NGINX | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Figure out correct version
          if [ "$VERSION" == "master" ]; then
              DOCKER_VERSION=latest
          elif [ "$VERSION" == "develop" ]; then
              DOCKER_VERSION=nightly
          else
              DOCKER_VERSION=$VERSION
          fi

          echo "IMAGE_ID_PHP=$IMAGE_ID_PHP"
          echo "::set-env name=IMAGE_ID_PHP::$IMAGE_ID_PHP"
          echo "IMAGE_ID_NGINX=$IMAGE_ID_NGINX"
          echo "::set-env name=IMAGE_ID_NGINX::$IMAGE_ID_NGINX"
          echo "VERSION=$VERSION"
          echo "::set-env name=VERSION::$VERSION"
          echo "DOCKER_VERSION=$DOCKER_VERSION"
          echo "::set-env name=DOCKER_VERSION::$DOCKER_VERSION"

      - name: Build PHP image (Development)
        if: github.ref != 'refs/heads/master'
        run: |
          composer install --ignore-platform-reqs --prefer-dist --no-interaction --no-plugins --no-scripts --no-suggest --optimize-autoloader
          docker build . --file Dockerfile --tag $IMAGE_NAME_PHP --target php --build-arg DEV="true"

      - name: Build PHP image (Production)
        if: github.ref == 'refs/heads/master'
        run: |
          composer install --ignore-platform-reqs --prefer-dist --no-dev --no-interaction --no-plugins --no-scripts --no-suggest --optimize-autoloader
          docker build . --file Dockerfile --tag $IMAGE_NAME_PHP --target php

      - name: Build Nginx image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME_NGINX --target nginx

      - name: Log into registry
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push PHP image to Docker Hub
        run: |
          docker tag $IMAGE_NAME_PHP $IMAGE_ID_PHP:$DOCKER_VERSION
          docker push $IMAGE_ID_PHP:$DOCKER_VERSION

      - name: Push Nginx image to Docker Hub
        run: |
          docker tag $IMAGE_NAME_NGINX $IMAGE_ID_NGINX:$DOCKER_VERSION
          docker push $IMAGE_ID_NGINX:$DOCKER_VERSION
